<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.sstrategy</groupId>
	<artifactId>jms-demo</artifactId>
	<version>01.00.00-SNAPSHOT</version>
	<packaging>war</packaging>
	<url>http://www.sstrategy.io</url>
	<description>
		Proyecto Spring 4.0 base.
	</description>
	
	<properties>
		<flywayPropertiesFile>flyway.app.properties</flywayPropertiesFile>
	
		<!-- Añadido para resolver este problema: https://maven.apache.org/general.html#encoding-warning -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<activemq.version>5.2.0</activemq.version>
	</properties>
	
	<build>
		<sourceDirectory>src/main/java</sourceDirectory>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<!-- Filtramos los ficheros en config, para reemplazar variables maven -->
			<resource>
				<directory>src/main/resources/config</directory>
				<targetPath>config</targetPath>
				<filtering>true</filtering>
			</resource>
		</resources>
		
		<plugins>
		
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			
			<!-- Configura el plugin que ejecuta los tests. Es necesario configurarlo para establecer la
			codificación UTF-8. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.12</version>
				<configuration>
					<junitArtifactName>junit:junit</junitArtifactName>
					<encoding>UTF-8</encoding>
					<inputEncoding>UTF-8</inputEncoding>
					<outputEncoding>UTF-8</outputEncoding>
					<argLine>-Xms256m -Xmx512m -XX:MaxPermSize=128m -ea -Dfile.encoding=UTF-8</argLine>
				</configuration>
			</plugin>
			
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<warSourceDirectory>WebContent</warSourceDirectory>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<!-- Excluye el fichero entidad.properties al generar el paquete. -->
					<!-- TODO Revisar esto, creo que debería ser packagingExcludes (ASA 2016/12/20). Tal como
					está solo afecta a ficheros en WebContent. -->
					<packagingExcludes>**/entidad.properties</packagingExcludes>
				</configuration>
			</plugin>
			
			<!-- Despliegue en Tomcat -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<url>${tomcatUrl}</url>
					<server>${tomcatServer}</server>
					<path>${tomcatPath}</path>
					<update>true</update>
				</configuration>
			</plugin>
			
		</plugins>
		
	</build>

	<repositories>
		
		<!-- Para bibliotecas que no estén disponibles públicamente para maven (de momento, jdbc), creamos un repositorio local en
		el proyecto. Para generar la estructura de ficheros se ha usado la siguiente instrucción de consola:
		mvn deploy:deploy-file -Durl=file://c:/proyectos/plan2go_service/lib -Dfile=../sqljdbc4.jar -DgroupId=com.hti -DartifactId=sqljdbc4 -Dpackaging=jar -Dversion=1.0
		Más información en las siguientes fuentes:
		https://docs.google.com/document/d/1KnMktWYopWHYvoFeJS3CJRNrBkMscD-YEIW6TpXU_gI/edit#
		https://devcenter.heroku.com/articles/local-maven-dependencies
		-->
		<repository>
			<id>project.local</id>
			<name>project</name>
			<url>file:${project.basedir}/lib</url>
		</repository>

		<!-- Necesario para la biblioteca javax.jms, que no está disponible en el repositorio central de maven. -->
		<repository>
			<id>repository.jboss.org-public</id>
			<name>JBoss.org Maven repository</name>
			<url>https://repository.jboss.org/nexus/content/groups/public</url>
		</repository>  
		
	</repositories>

	<dependencies>

		<dependency>
		    <groupId>com.thetransactioncompany</groupId>
		    <artifactId>cors-filter</artifactId>
		    <version>2.5</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>4.3.18.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>4.3.18.RELEASE</version>
		</dependency>

		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jms</artifactId>
		    <version>4.3.18.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>4.3.18.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>4.3.18.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>4.3.18.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.3.18.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>4.3.18.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>4.3.18.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
			<version>4.3.18.RELEASE</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>4.3.18.RELEASE</version>
		</dependency>
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>javax.jms</groupId>
			<artifactId>jms</artifactId>
			<version>1.1</version>
		</dependency>
		
		<!-- Esta dependencia se requiere para poder compilar, pero no deben incluirse las clases en el
		war. La implementación provendrá del propio servidor Tomcat en el que se despliegue. Por eso se
		establece scope = provided.	Ver: http://stackoverflow.com/a/13621453. y http://stackoverflow.com/a/24387031 -->
		<dependency>
			<groupId>javax.el</groupId>
			<artifactId>javax.el-api</artifactId>
			<version>2.2.4</version>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.0</version>
		</dependency>
		
		<!-- Implementación de JMS (alternativa a IBM WebSphere MQ). -->
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-core</artifactId>
			<version>${activemq.version}</version>
		</dependency>
		
		 <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-optional</artifactId>
            <version>${activemq.version}</version>
        </dependency>

	</dependencies>
    
</project>