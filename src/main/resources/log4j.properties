######################################################################################
###                FICHERO DE CONFIGURACIÓN DEL SISTEMA DE LOG (log4j)             ###
######################################################################################
### En la parte inferior del fichero se explica cómo lanzar mensajes de log desde  ###
### los módulos java de la aplicación.                                             ###
######################################################################################	

### ---------------- Definición de loggers ----------------------------------------- ###
### ---------------------------------------------------------------------------------###
### Para cada logger se fija su nivel (se mostrarán los mensajes de nivel igual 
### o superior al indicado) y los appenders que se encargarán de presentar la información.
### Opciones: ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF

### El rootLogger afecta a todos los loggers de la aplicación.
### Estableciendo su nivel a INFO evitamos ver mensajes de trace y debug de las librerías.
### En nuestro caso enviamos los mismos mensajes a los appenders
### CONSOLA - Que irá a la consola de MyEclipse cuando ejecutemos desde MyEclipse
###           y a catalina.out (en Tomcat; o system.out/system.err si fuera webSphere) 
###			  cuando despleguemos la aplicación en un servidor.
### ARCHIVO - Que irá a un archivo que se copiará y renombrará diariamente.	
log4j.rootLogger = ERROR, ARCHIVO, CONSOLA
### -------------- Logger para las clases que indicamos y las descendientes en la jerarquía ----------###
### Esto nos permite pintar mensajes de nivel más bajo de nuestras clases y de nivel más alto de las librerías.
### Si fijamos aquí trace, se enviarán a los appenders establecidos para el rootLogger los mensajes de nivel desde trace de nuestras clases
### pero del resto de clases se enviarán solo a partir del nivel que se fijó en el rootLogger. (Así podemos debuggear nuestras clases
### sin que nos estorben el montón de mensajes generados por JSF.)
log4j.logger.com.hermesti = ALL, ARCHIVO, CONSOLA
log4j.logger.org.flywaydb = ERROR, ARCHIVO, CONSOLA

### Desactiva la "additivity" del logger com.hermesti. El objetivo es evitar que los mensajes de este logger se propaguen a su
### logger padre (rootLogger) provocando que sean añadidos dos veces al log.
log4j.additivity.com.hermesti = false

### ---------------- Definición de appenders --------------------------------------- ###
### ---------------------------------------------------------------------------------###
### ---- CONSOLA - Lo usaremos para dirigir mensajes a la salida estandar.----------
### 		   Ojo, cuando la aplicación esté instalada irá a catalina.out o similar.
log4j.appender.CONSOLA=org.apache.log4j.ConsoleAppender
### Se puede configurar si los mensajes deben ir a System.out o System.err (en Tomcat
### se suelen reunir en un solo fichero (catalina.out).
log4j.appender.CONSOLA.Target=System.out
log4j.appender.CONSOLA.layout=org.apache.log4j.PatternLayout
### Usamos ABSOLUTE para el formateo de fechas porque funciona más rápido
### que un formateo con un formato personalizado.
### Pintamos el idUsuario y el identificador haciendo uso de atributos almacenados en MDC.
log4j.appender.CONSOLA.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
### Fijar un umbral (threshold) permite limitar los mensajes que pinta cada appender
### de forma independiente. Sólo se pintarán mensajes con nivel igual o superior al indicado.
### Así podemos mandar a CONSOLA a partir de ERROR aunque en ARCHIVO
### se estén pintando también INFO y WARN (por ejemplo).
log4j.appender.CONSOLA.Threshold=INFO


### ---- ARCHIVO - Lo usaremos para dirigir mensajes a un archivo diario.-------
log4j.appender.ARCHIVO=org.apache.log4j.DailyRollingFileAppender
### Establecemos una ruta del servidor tomcat (donde suele guardarse
### catalina.out) para que guarde el fichero del día actual y los de los días
### anteriores que se van archivando.
log4j.appender.ARCHIVO.File= ${catalina.base}/logs/plan2go.log
log4j.appender.ARCHIVO.Append = true
### Al cambiar de día, se renombrará el fichero del día anterior según el patrón siguiente.
### (Es decir, se le añadirá un punto y la fecha después de ".log")
log4j.appender.ARCHIVO.DatePattern = '.'yyy-MM-dd
log4j.appender.ARCHIVO.layout = org.apache.log4j.PatternLayout
log4j.appender.ARCHIVO.encoding=UTF-8
### Usamos ABSOLUTE para el formateo de fechas porque funciona más rápido
### que un formateo con un formato personalizado.
### Pintamos el idUsuario y el identificador haciendo uso de atributos almacenados en MDC.
log4j.appender.ARCHIVO.layout.ConversionPattern =%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

#############################################################################################
###      DIRECTRICES PARA LANZAR MENSAJES DE LOG DESDE LAS CLASES JAVA DE LA APLICACIÓN   ###
#############################################################################################
###  Para poder lanzar mensajes de log desde una clase, hay que obtener un Logger para esa clase.
###  Para obtener un Logger debemos pedírselo a la clase Logger de log4j por un nombre.
###  De esta forma, log4j creará un Logger con ese nombre. Para poder controlar de forma independiente
###  los mensajes de cada clase y tener una jerarquía de Loggers coherente con la jerarquía de paquetes
###  de nuestra aplicación, pediremos los Loggers utilizando el nombre de la clase.
###
### Añadiremos, como primera línea de la clase, la siguiente (cambiando, en cada caso
### el nombre de la clase UsuariosBB.class por el de la clase en la que estemos):
### 
###          private static final Logger logger = Logger.getLogger(UsuariosBB.class);
###
### Para lanzar mensajes usaremos uno de los siguientes métodos sobre el objeto logger que hemos obtenido.
### Cada método lanza un mensaje con un nivel, que se indicará en el log y servirá para filtrar los mensajes
### por su importancia. Los métodos admiten uno o dos parámetros:
### - Primer parámetro: la cadena de texto con el mensaje que queremos mostrar.
### - Segundo parámetro: un Throwable (por ejemplo una Exception) del que queremos pintar el "stack trace". 
###                      Esto lo usaremos cuando el mensaje lo haya provocado una excepción.
###
### trace()  - El menos importante, que se suele usar en la fase de desarrollo.	
###            Ej: Es el típico System.out.println("paso por aquí").
### debug()  - Información útil para depurar.	
###            Ej: Algún resultado parcial, el valor de alguna variable, etc.
### info()   - Información sobre la aplicación que pueden tener cierto interés para ser mostrados en el log.	
###	           Ej: Se establece una conexión con base de datos, se conecta un cliente a nuestro servidor,
###            un usuario entra en sesión, se guarda la sesión en base de datos, etc.
### warn()   - Advertencias o fallos sin importancia para la ejecución del programa.	
###	           Ej: Un usuario introduce una contraseña errónea, un fichero de configuración no existe y
###	           la aplicación coge la configuración por defecto que se establezca en el código, etc.
### error()  - Errores importantes, pero que no obligan a terminar la aplicación.
###	           Ej: No se puede conectar a la base de datos pero hay ciertas funcionalidades que sí
###            pueden seguir ofreciéndose, aun sin base de datos.
###            Este es el nivel que usaremos para las excepciones que controlemos y que no lleven a la terminación de la
###            aplicación.
### fatal()  - Errores que obligan a terminar la aplicación.	
###	           Ej: Se acaba la memoria disponible.
###
### Ejemplos:
###			logger.warn("La importación falló por ser el fichero incorrecto.");
###			logger.fatal("Se ha producido un error al consultar la BBDD", excepcionCapturada);	
###
###