<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="
       http://www.springframework.org/schema/mvc     http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
       http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/jms     http://www.springframework.org/schema/jms/spring-jms-4.2.xsd">

	<context:annotation-config />

	<!-- Establece ficheros de configuración. Gracias a order=1, puede ser reemplazado 
		por otros ficheros de configuración. -->
	<context:property-placeholder
		location="
			classpath:config/application.properties, 
			classpath:config/entidad.properties"
		ignore-resource-not-found="true" order="1" />

	<context:component-scan base-package="com.hermesti.plan2go.modelo.importadores" />

	<!-- Aplica automáticamente conversiones a las propiedades inyectadas por 
		spring. Por ejemplo: las propiedades con listas separadas por comas pueden 
		ahora inyectarse correctamente en propiedades de tipo List. -->
	<bean id="conversionService"
		class="org.springframework.context.support.ConversionServiceFactoryBean" />

	<!-- Idiomatización -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:literales/errores</value>
				<value>classpath:literales/general</value>
				<value>classpath:literales/correos</value>
				<value>classpath:literales/sms</value>
				<value>classpath:literales/mandato</value>
				<value>classpath:literales/prueba</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- 
		El elemento jms:annotation-driven permite utilizar la anotación @JmsListener para dar de alta escuchadores de mensajes. 
		En este proyecto de ejemplo, los escuchadores se encuentran definidos en la clase Receiver.
		Observa que debe definir un container-factory, que es una clase encargada de construir los JmsListener's. El container-factory
		utilizado es un proporcionado por Spring: el DefaultJmsListenerContainerFactory. 
	-->
	<jms:annotation-driven container-factory="myJmsListenerContainerFactory" />

	<!-- 
		Define el bean a utilizar como container-factory por los métodos anotados como @JmsListener.
		Atención a la propiedad clientId: el valor establecido aquí se refleja en la columna 'Client ID'
		visible en la pestaña 'Subscribers' del Broker MQ (en nuestro caso, ActiveMQ, aunque supongo que será igual en
		IBM MQ).
	-->
	<bean id="myJmsListenerContainerFactory" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory">
		<property name="connectionFactory" ref="jmsQueueConnectionFactory" />
		<property name="clientId" value="Demo de JMS" />
	</bean>

	<bean id="jmsQueueConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" />
	</bean>

	<bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="jmsQueueConnectionFactory" />
	</bean>
	
	<bean class="com.sstrategy.demo.Receiver" />

</beans>
