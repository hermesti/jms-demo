<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="
       http://www.springframework.org/schema/mvc     http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
       http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/jms     http://www.springframework.org/schema/jms/spring-jms-4.2.xsd">

	<context:annotation-config />

	<!-- Establece ficheros de configuración. Gracias a order=1, puede ser reemplazado 
		por otros ficheros de configuración. -->
	<context:property-placeholder
		location="
			classpath:config/application.properties, 
			classpath:config/entidad.properties"
		ignore-resource-not-found="true" order="1" />

	<context:component-scan base-package="com.hermesti.plan2go.modelo.importadores" />

	<!-- 
		El elemento jms:annotation-driven permite utilizar la anotación @JmsListener para dar de alta escuchadores de mensajes. 
		En este proyecto de ejemplo, los escuchadores se encuentran definidos en la clase Receiver.
		Observa que debe definir un container-factory, que es una clase encargada de construir los JmsListener's. El container-factory
		utilizado es un proporcionado por Spring: el DefaultJmsListenerContainerFactory. 
	-->
	<jms:annotation-driven />

	<!--
		Esta es la clase encargada de generar conexiones con ActiveMQ. Se necesita tanto para generar JmsListenerContainerFactory's
		(para los suscriptores/receptores) como para los JmsTemplate (para los publicadores/enviadores) 
	-->
	<bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" />
	</bean>
	
	<!-- 
		================================
		 ENVÍO DE MENSAJES: JmsTemplate 
		================================	 
	-->
	
	<!-- 
		JmsTemplate para envíos punto a punto. Los mensajes se envían a una cola (queue) de la que serán extraídos por un destinatario. 
		La propiedad pubSubDomain a false es la que determina que este JmsTemplate sirva para publicar mensajes punto a punto. 
	-->
	<bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
		<property name="pubSubDomain" value="false" />
	</bean>
	
	<!-- 
		JmsTemplate para publicaciones broadcast. Los mensajes se envían a un "topic", al que se suscriben los suscriptores.
	-->
	<bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
		<property name="pubSubDomain" value="true" />
	</bean>

	<!-- 
		=========================================================
		 RECEPCIÓN DE MENSAJES: JMS Listener Container Factory's
		========================================================= 
	-->

	<!-- 
		JmsListenerContainerFactory para receptores en envíos punto a punto.
		
		Define el bean a utilizar como container-factory por los métodos anotados como @JmsListener.
		Atención a la propiedad clientId: el valor establecido aquí se refleja en la columna 'Client ID'
		visible en la pestaña 'Subscribers' del Broker MQ (en nuestro caso, ActiveMQ, aunque supongo que será igual en
		IBM MQ).
		
		La propiedad pubSubDomain a false es la que determina que este JmsListenerContainerFactory sirva para recibir mensajes
		punto a punto.
	-->
	<bean id="queueJmsListenerContainerFactory" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
		<property name="clientId" value="Cliente queue" />
		<property name="pubSubDomain" value="false" />
	</bean>
	
	<!-- 
		Receptores de mensajes punto a punto (clases con métodos anotados como @JmsListener asociadas a JmsListenerContainerFactory de
		recepción de mensajes punto a punto).
	-->
	<bean class="com.sstrategy.demo.Receiver" />
	
	<!--
		Define dos beans como JmsListenerContainerFactory. Estas clases se encargand e instanciar los suscriptores. 
		Definimos dos porque, para conseguir suscriptores "durables", se requieren suscriptores identificados por
		clientId únicos. Dado que en este proyecto se describen dos suscriptores, y que el clientId es un parámetro del 
		JmsListenerContainerFactory, tenemos que definir dos instancias.
		
		Nota: un suscriptor durable es aquel que sigue existiendo cuando la aplicación ya no está activa. Eso significa que,
		una vez arrancada esta aplicación, se crearán dos suscriptores en ActiveMQ (que pueden consultarse en el administrador
		de ActiveMQ), y esos suscriptores seguirán existiendo y recibiendo mensajes aunque la aplicación no esté funcionando.
		Cuando la aplicación arranque de nuevo, recibirá los mensajes. Si los suscriptores fueran no-durables, los mensajes
		recibidos mientras la aplicación no esté en funcionamiento se perderían. Para el uso que se va a hacer en las aplicaciones
		Sstrategy, entiendo que se necesitarán suscriptores durables. 
	-->
	<bean id="topicJmsListenerContainerFactory1" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
		<property name="clientId" value="ClienteTopic1" />
		<property name="pubSubDomain" value="true" />
		<property name="subscriptionDurable" value="true" />
	</bean>
	
	<bean id="topicJmsListenerContainerFactory2" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
		<property name="clientId" value="ClienteTopic2" />
		<property name="pubSubDomain" value="true" />
		<property name="subscriptionDurable" value="true" />
	</bean>

	<!-- 
		Receptores de mensajes broadcast (clases con métodos anotados como @JmsListener asociadas a JmsListenerContainerFactory de
		recepción de mensajes broadcast).
	-->
	<bean class="com.sstrategy.demo.Subscriber1" />
	<bean class="com.sstrategy.demo.Subscriber2" />

</beans>
